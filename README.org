#+TITLE: Inline Anki

For nearly a decade I've daydreamed of writing [[https://en.wikipedia.org/wiki/Spaced_repetition#Software][SRS]] flashcards as if they were body text, flowing as part of any text I write in any of my files, so that the same text can serve as a single-source-of-truth.

The other SRS programs in the Emacs ecosystem ([[https://github.com/l3kn/org-fc][org-fc]], [[https://gitlab.com/phillord/org-drill][org-drill]], [[https://github.com/eyeinsky/org-anki][org-anki]], [[https://github.com/abo-abo/pamparam][pamparam]], [[https://github.com/louietan/anki-editor][anki-editor]]) all share a fatal flaw: *they separate the flashcards from normal text* by way of shoving them under a dedicated headline.

I don't want to awkwardly append flashcards to the end of an Org section as a kind of paraphrasis or summary of that section, but to let the flashcards serve /as/ paragraphs in their own right!

* Demonstration
** As list items
Here are four Anki cloze notes, expressed in just four list items:

- @^{1693000402} ðŸ‡«ðŸ‡· *maison*  ðŸ‡¬ðŸ‡§ *house*
- @^{1693000403} ðŸ‡«ðŸ‡· *reunion*  ðŸ‡¬ðŸ‡§ *meeting*
- @^{1690300404} ðŸ‡«ðŸ‡· *legerdemain*  ðŸ‡¬ðŸ‡§ *sleight-of-hand*
- @^{1690003421} DRY is short for *Don't Repeat Yourself*

The starting @^{number} uniquely identifies the note.  Think of @ as encircling an "a" for "Anki". ;-)

The bold parts define cloze deletions.

There are no hidden property drawers.

** As list items, with trailing ID
You have the freedom to place the Anki note ID at either the beginning /or/ the end of a list item.  If it's at the end, you don't need the @ glyph.

I find it more aesthetic to have the ID at the end for lists that aren't a pure list of flashcards---lists that mix and match flashcards and non-flashcard things.

The following list expresses four Anki cloze notes, among other unrelated text:

- When a muscle feels tight after exercise, DON'T *stretch*.^{1690000201}
- Good relationships aren't built on two halves, but two *wholes*.^{1690000210}
- Most people are willing to bet money in the lab that they are superior to *most people* on most desirable traits.^{1690000013}
- Here is a non-card...
  - Just some text unrelated to anki...
    - Favorite trick of fitness program gurus: babysit *genetic freaks* and bask in their performance.^{1690006401}
  
** As running paragraphs
The following two paragraphs express two Anki cloze notes.

A gotcha for inline-anki: you must not *hard-wrap* paragraphs.  If you do, inline-anki will only grab *the last line* of the paragraph.^{1690986753420}

In English, we have the word-pair truth and lying.  We also have the word-pair *rational* and rationalization: it's as if lying was called *truthization*.^{16900030021}

* Usage
** Permanent limitations

There are *three flaws* which will never go away:

- *Flaw 1:* Like anki-editor, inline-anki does not let you review inside Emacs.  You have to whip out your phone and review there, in your Anki app.
  - To me this is a non-issue since the bus is the only place I want to review anyway.
- *Flaw 2:* Like anki-editor, inline-anki takes ownership -- you cannot edit the cards from within Anki.  You have to return to your computer and edit there, in Emacs.
  - This means you can't make small corrections on-the-fly while reviewing.  Bit annoying, but at least you won't face sync conflicts (and I won't have to write sync code, I hear it's a nightmare).
  - Fortunately, this is less of a problem in our paradigm, since the flashcards are serving double duty.  You will often directly see and refine the text of the flashcard, in contrast with other SRS when you only see it during review.
- *Flaw 3:* The note format is constrained -- you can't express every kind of flashcard possible in Anki.
  - For me this is a good trade, if that means the flashcards stay in my life.  Until now, they never stayed long due to clumsy systems.   Better simple flashcards than no flashcards.

** Limitations vs. anki-editor

Many traditional features are ABSENT in inline-anki:

- It uses only one deck ("Default")
- It uses only one note type ("Cloze"), with only one field ("Text")
- You cannot set tags on a per-card basis, but the cards will inherit tags from the local Org context (i.e. subtree or file-level tags)
  - Note that Anki tags lose much of their organizational purpose if all your notes live in Org files anyway -- you'll be organizing from within [[https://github.com/org-roam/org-roam][org-roam]] or the like, not from within Anki.  However, at least two use-cases remain:
    - You can display the tags inside cards as a contextual hint, [[https://edstrom.dev/posts/qix2Q4W/how-to-display-tags-as-hint-in-all-anki-cards][if you code this in the card template]]
    - You can use the tags to set up Custom Study sessions on a filtered subset of notes
      - Useful when you're shoving everything into one deck
- It does not notice when Anki flags a card with =marked= or =leech=
- It does not send pictures or media to Anki
  - I aim to add this back, after I implement multiline flashcards as :drawers:

** Syntax of a flashcard

- To identify a flashcard, inline-anki looks for one of the following things:
  - A magic string at the *start of a list item*: =@anki=.  When Anki assigns it an ID, it becomes a =@= glyph followed by a 13-digit number in superscript, like this: =@^{1693535436701}=.
  - A magic string at the *end of a line*: =@anki= or =^{anki}=.  Same as above, except that you can omit the =@= glyph and inline-anki won't add one.  This works with paragraphs as well as list items.
- Clozes are marked by *bold text*, or you can configure =inline-anki-emphasis-type= if you prefer italic or underline.
  - Bear in mind that if you change to italic or underline, you'll have to edit all your cards to match.
  - You can, if necessary, write Anki's regular ={{c1::}}= syntax directly.  Mainly useful for writing math equations.
#  - a drawer named =:anki:=, which is renamed to something like =:anki-16900001:= when the Anki note ID has been assigned.

** To push cards


1. Make sure Anki has the AnkiConnect add-on installed, and you have =curl= available too
2. Make sure Anki is running in the background
3. Visit an Org file that contains some inline-anki cards, and type =M-x inline-anki-push-notes RET=

You may like to know that:
- When you update a note, it overwrites what was previously in that note in Anki.  Any edits made inside Anki will be forgotten.  Anki isn't responsible for anything except the review schedule.
- There's a bit of a gimmick: if a note has 3 cloze fields, and you study it a bit, and later you remove the first cloze field, the second and third field will *inherit the scheduling of the first and second fields*.  The third field's original scheduling will be attached to an empty card (which you can clean up with "Check database..." in Anki).  So technically, you can have cards that aren't scheduled truly to the algorithm, and failure statistics may be referring to a cloze card that you've removed.
  - Up to you what you do with this knowledge.  My two cents: it affects nothing in my life.

** To push cards from a whole directory

First configure =inline-anki-directory=, then you can run =M-x inline-anki-bulk-push RET= anytime.  The command is largely untested as of [2023-09-20], so it may be a bit janky.

** Config variables

- =inline-anki-deck=
  - Default "Default".

- =inline-anki-note-type=
  - Default "Cloze".

- =inline-anki-note-fields=
  - Default =("Text" "Extra")=.

- =inline-anki-default-tags=
  - List of strings, default =()=.

- =inline-anki-emphasis-type=
  - Default =(bold)=.  Can be set to either =(italic)= or =(underline)= instead.

- =inline-anki-directory=
  - Defaults to the value of =org-roam-directory= or =org-directory=.

* Installation

If you have [[https://github.com/raxod502/straight.el][straight.el]], you can install the package like so:
#+begin_src elisp
(use-package asyncloop
  :straight (asyncloop   :type git :host github :repo "meedstrom/asyncloop"))
(use-package inline-anki
  :straight (inline-anki :type git :host github :repo "meedstrom/inline-anki"))
#+end_src

Alternatively with Doom Emacs, this goes in =packages.el=:
#+begin_src elisp
(package! asyncloop   :recipe (:host github :repo "meedstrom/asyncloop"))
(package! inline-anki :recipe (:host github :repo "meedstrom/inline-anki"))
#+end_src

Elpaca riders and other folk, you know what to do.

* Warning
This package relies on the fontification in Org buffers to work correctly.  So if you're dragging along a half-broken Org setup -- best debug it.
